{"version":3,"sources":["components/NotFound.js","components/Navbar.js","components/history.js","components/SearchC.js","components/Recipe.js","components/EachRecipe.js","App.js","serviceWorker.js","index.js"],"names":["NotFounds","className","to","Navbar","history","withRouter","useState","recipeName","setrecipeName","isLoading","setIsLoading","searchLoading","setsearchLoading","getData","a","url","console","log","fetch","then","res","json","d","hits","length","push","recipeArr","document","querySelector","style","display","catch","e","onSubmit","preventDefault","id","type","onChange","target","value","addEventListener","keyCode","placeholder","autoComplete","match","location","state","recipeData","params","name","map","data","index","key","onClick","recipe","label","changePath","src","image","alt","EachRecipe","window","scrollTo","Object","keys","totalNutrients","sort","totalNutrient","healthLabels","cautions","ingredientLines","ingredients","text","parseInt","weight","val","parseFloat","quantity","toFixed","unit","App","exact","path","component","Recipe","Boolean","hostname","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.613a8191.chunk.js","sourcesContent":["import React from \"react\";\r\nimport NotFound from \"./NotFound\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nfunction NotFounds() {\r\n  return (\r\n    <div className=\"NotFound\">\r\n      <div>\r\n        <div className=\"msg\">Page Not Found !!</div>\r\n        <div>\r\n          <Link to=\"/food_recipe_react_app/\" className=\"button\">\r\n            Go Home\r\n          </Link>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport  default NotFounds ;\r\n","import React from \"react\";\r\nimport { NavLink } from \"react-router-dom\";\r\n\r\nfunction Navbar() {\r\n  return (\r\n    <div className=\"navbar\">\r\n      <div className=\"item title\">\r\n        <NavLink to=\"/food_recipe_react_app\">\r\n          <div className=\"title\">Food Recipe</div>\r\n        </NavLink>\r\n        <div className=\"desc\">know your food?</div>\r\n      </div>\r\n      {/* <div className=\"items\">\r\n        <button>Login</button>\r\n      </div> */}\r\n      <div className=\"developer\">- developed by alpha</div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Navbar;\r\n","import { createBrowserHistory as history } from \"history\";\r\nexport default history();\r\n","import React, { useState } from \"react\";\r\nimport history from \"./history\";\r\nimport { withRouter } from \"react-router-dom\";\r\n\r\nfunction SearchC() {\r\n  const [recipeName, setrecipeName] = useState(\"\");\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [searchLoading, setsearchLoading] = useState(\"\");\r\n\r\n  // on submit ... click on search button\r\n  const pageToRecipe = (e) => {\r\n    e.preventDefault();\r\n    if (recipeName.length > 2) {\r\n      document.querySelector(\".error\").style.display = \"none\";\r\n      getData();\r\n    } else {\r\n      setIsLoading(false);\r\n      document.querySelector(\".error\").style.display = \"block\";\r\n    }\r\n  };\r\n\r\n  // fetching the data for variable\r\n  const getData = async () => {\r\n    setsearchLoading(\"Searching : \");\r\n    let appId = \"35415686\";\r\n    let appKey = \"a67a3e31295996b90f996df842ad1b3d\";\r\n    let url =\r\n      \"https://api.edamam.com/search?q=\" +\r\n      recipeName +\r\n      \"&app_id=\" +\r\n      appId +\r\n      \"&app_key=\" +\r\n      appKey;\r\n    console.log(url);\r\n\r\n    //api call\r\n    let data = await fetch(url)\r\n      .then((res) => res.json())\r\n      .then((d) => {\r\n        if (d.hits.length !== 0) {\r\n          history.push(\"/search/\" + recipeName, {\r\n            recipeArr: d.hits,\r\n          });\r\n        } else {\r\n          setIsLoading(false);\r\n          document.querySelector(\".error\").style.display = \"block\";\r\n        }\r\n      })\r\n      .catch((e) => {\r\n        setIsLoading(false);\r\n        document.querySelector(\".error\").style.display = \"block\";\r\n      });\r\n  };\r\n\r\n  //input change for search recipe\r\n  const inputChange = (e) => {\r\n    document.querySelector(\".error\").style.display = \"none\";\r\n    setrecipeName(e.target.value);\r\n    e.target.addEventListener(\"keydown\", (e) => {\r\n      if (e.keyCode === 8) {\r\n        document.querySelector(\".error\").style.display = \"none\";\r\n      }\r\n    });\r\n    if (document.querySelector(\"#search\").value.length > 2) {\r\n      setIsLoading(true);\r\n      setsearchLoading(\"Recipe Name : \");\r\n    } else {\r\n      setIsLoading(false);\r\n      setsearchLoading(\"\");\r\n      document.querySelector(\".error\").style.display = \"none\";\r\n    }\r\n  };\r\n\r\n  //return\r\n  return (\r\n    <form onSubmit={pageToRecipe}>\r\n      <div className=\"searchBox\">\r\n        <input\r\n          id=\"search\"\r\n          type=\"text\"\r\n          onChange={inputChange}\r\n          placeholder=\"Seach Recipe.... \"\r\n          autoComplete=\"off\"\r\n        />\r\n\r\n        <button type=\"submit\">Search</button>\r\n\r\n        <div className=\"error\">\r\n          <div className=\"title\">Error</div>\r\n          <div className=\"desc\">- Please search valid Recipe name.</div>\r\n          <div className=\"desc\">- Please search atleast 3 characters.</div>\r\n          <div className=\"desc\">- Should not include any symbols.</div>\r\n          <div className=\"desc\">- Check your internet access.</div>\r\n        </div>\r\n        {isLoading && (\r\n          <div className=\"isLoading\">\r\n            {searchLoading} {recipeName} <span>.</span>\r\n            <span>.</span>\r\n            <span>.</span>\r\n            <span>.</span>\r\n          </div>\r\n        )}\r\n      </div>\r\n    </form>\r\n  );\r\n}\r\n\r\nexport default withRouter(SearchC);\r\n","import React, { useState } from \"react\";\r\nimport { BrowserRouter as Router, NavLink, withRouter } from \"react-router-dom\";\r\nimport history from \"./history\";\r\nfunction Recipe({ match, location }) {\r\n  // reciving data from history location\r\n  const [recipeData, setRecipeData] = useState(location.state.recipeArr);\r\n  const changePath = (data) => {\r\n    history.push(\"/recipe/\" + data.recipe.label, {\r\n      data,\r\n    });\r\n  };\r\n  return (\r\n    <div>\r\n      <div className=\"searchedText\">\r\n        <div className=\"title\">Searched Recipe : {match.params.name}</div>\r\n      </div>\r\n      <div className=\"recipeSearched\">\r\n        {recipeData.map((data, index) => (\r\n          <div\r\n            className=\"eachRecipe\"\r\n            key={index + \"recipe\"}\r\n            onClick={() => changePath(data)}\r\n          >\r\n            <div className=\"img\">\r\n              <img src={data.recipe.image} alt=\"Recipe\" />\r\n            </div>\r\n            <div>\r\n              <div className=\"title\">{data.recipe.label}</div>\r\n            </div>\r\n          </div>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default withRouter(Recipe);\r\n","import React, { useState } from \"react\";\r\nfunction EachRecipe({\r\n  location: {\r\n    state: {\r\n      data: { recipe },\r\n    },\r\n  },\r\n}) {\r\n  window.scrollTo(0, 0);\r\n\r\n  const [totalNutrient, settotalNutrient] = useState(\r\n    Object.keys(recipe.totalNutrients).sort()\r\n  );\r\n  console.log(recipe.totalNutrients);\r\n  return (\r\n    <div className=\"eachRecipePage\">\r\n      <div className=\"imageAndInfo\">\r\n        <div className=\"imageAndLabel\">\r\n          <div className=\"img\">\r\n            <img src={recipe.image} />\r\n          </div>\r\n          <div className=\"label\">{recipe.label}</div>\r\n          <div className=\"status\">\r\n            <div className=\"pos\">\r\n              <div className=\"title\"> Positive</div>\r\n              {recipe.healthLabels.map((data, index) => (\r\n                <div className=\"healthLabels\" key={index + \"healthLabels\"}>\r\n                  {data}\r\n                </div>\r\n              ))}\r\n            </div>\r\n            <div className=\"neg\">\r\n              <div className=\"title\">Caution</div>\r\n              {recipe.cautions.map((data, index) => (\r\n                <div className=\"cautions\" key={index + \"cautions\"}>\r\n                  {data}\r\n                </div>\r\n              ))}\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className=\"info\">\r\n          <div className=\"title\">Ingredients :</div>\r\n          <ul>\r\n            {recipe.ingredientLines.map((data, index) => (\r\n              <li className=\"ingredientLines\" key={index + \"ingredientLines\"}>\r\n                {data}\r\n              </li>\r\n            ))}\r\n          </ul>\r\n        </div>\r\n      </div>\r\n      <div className=\"IL\">\r\n        <div className=\"title\">Ingredient Detail's</div>\r\n        <p>These are the ingredients used to make this recipe.</p>\r\n        <div className=\"desc\">\r\n          {recipe.ingredients.map((data, index) => (\r\n            <div className=\"eachIngredientsList\" key={index + \"eachIL\"}>\r\n              <div className=\"ingredient\">\r\n                <div>\r\n                  <img src={data.image} />\r\n                </div>\r\n\r\n                <div className=\"titleAndWeight\">\r\n                  <div className=\"text\">{data.text}</div>\r\n                  <div className=\"weight\">{parseInt(data.weight)}</div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          ))}\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"totalNutrients\">\r\n        <div className=\"title\">Total Nutrients</div>\r\n        <div className=\"ListtotalNutrients\">\r\n          <table>\r\n           <tr>\r\n           <th>SN</th>\r\n           <th>CODE</th>\r\n           <th>NAME OF NUTRIENT</th>\r\n           <th>QUANTITY</th>\r\n           </tr>\r\n            {totalNutrient.map((val, index) => (\r\n              <tr>\r\n                <td>{index + 1}</td>\r\n                <td>{val}</td>\r\n                <td>{recipe.totalNutrients[val].label}</td>\r\n                <td>\r\n                  {parseFloat(recipe.totalNutrients[val].quantity).toFixed(2)}{\" \"}\r\n                  {recipe.totalNutrients[val].unit}\r\n                </td>\r\n              </tr>\r\n            ))}\r\n          </table>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default EachRecipe;\r\n","import React from \"react\";\nimport { Router, Switch, Route } from \"react-router-dom\";\nimport \"./App.css\";\nimport NotFounds from \"./components/NotFound\";\nimport Navbar from \"./components/Navbar\";\nimport SearchC from \"./components/SearchC\";\nimport Recipe from \"./components/Recipe\";\nimport history from \"./components/history\";\nimport EachRecipe from \"./components/EachRecipe\";\n\nfunction App() {\n  return (\n    <Router history={history}>\n      <Navbar />\n      <Switch>\n        <Route exact path=\"/food_recipe_react_app\">\n          <SearchC />\n        </Route>\n        <Route path=\"/food_recipe_react_app/search/:name\" component={Recipe}></Route>\n        <Route path=\"/food_recipe_react_app/recipe/:name\" component={EachRecipe}></Route>\n        <Route path=\"*\" component={NotFounds}></Route>\n      </Switch>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}